require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe NotesController do

  def mock_note(stubs={})
    @mock_note ||= mock_model(Note, stubs).as_null_object
    @mock_stack ||= mock_model(Stack, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all notes as @notes" do
      Note.stub(:all) { [mock_note] }
      Stack.stub(:id) { [mock_stack] }
      get :index, :stack_id => mock_note.stack.id
      assigns(:notes).should eq([mock_note])
    end
  end

  describe "GET show" do
    it "assigns the requested note as @note" do
      Note.stub(:find).with("37") { mock_note }
      get :show, :id => "37"
      assigns(:note).should be(mock_note)
    end
  end

  describe "GET new" do
    it "assigns a new note as @note" do
      Note.stub(:new) { mock_note }
      get :new
      assigns(:note).should be(mock_note)
    end
  end

  describe "GET edit" do
    it "assigns the requested note as @note" do
      Note.stub(:find).with("37") { mock_note }
      get :edit, :id => "37"
      assigns(:note).should be(mock_note)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created note as @note" do
        Note.stub(:new).with({'these' => 'params'}) { mock_note(:save => true) }
        post :create, :note => {'these' => 'params'}
        assigns(:note).should be(mock_note)
      end

      it "redirects to the created note" do
        Note.stub(:new) { mock_note(:save => true) }
        post :create, :note => {}
        response.should redirect_to(note_url(mock_note))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved note as @note" do
        Note.stub(:new).with({'these' => 'params'}) { mock_note(:save => false) }
        post :create, :note => {'these' => 'params'}
        assigns(:note).should be(mock_note)
      end

      it "re-renders the 'new' template" do
        Note.stub(:new) { mock_note(:save => false) }
        post :create, :note => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested note" do
        Note.stub(:find).with("37") { mock_note }
        mock_note.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :note => {'these' => 'params'}
      end

      it "assigns the requested note as @note" do
        Note.stub(:find) { mock_note(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:note).should be(mock_note)
      end

      it "redirects to the note" do
        Note.stub(:find) { mock_note(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(notes_url)
      end
    end

    describe "with invalid params" do
      it "assigns the note as @note" do
        Note.stub(:find) { mock_note(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:note).should be(mock_note)
      end

      it "re-renders the 'edit' template" do
        Note.stub(:find) { mock_note(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested note" do
      Note.stub(:find).with("37") { mock_note }
      mock_note.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the notes list" do
      Note.stub(:find) { mock_note }
      delete :destroy, :id => "1"
      response.should redirect_to(notes_url)
    end
  end

end
